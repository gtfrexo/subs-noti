{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red53\green100\blue205;\red245\green246\blue250;\red48\green48\blue52;
}
{\*\expandedcolortbl;;\cssrgb\c26275\c48235\c84314;\cssrgb\c96863\c97255\c98431;\cssrgb\c24706\c24706\c26667;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \'97\'97ERROR MESSAGE\'97\'97\
\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 2018-11-30T21:44:40.109534+00:00 app[web.1]\cf4 \strokec4 : 21:44:40.108 [error] no function clause matching in anonymous fn/3 in DbWeb.Schema.__absinthe_type__/1\
2018-11-30T21:44:40.109537+00:00 app[web.1]: \
\cf2 \strokec2 2018-11-30T21:44:40.109567+00:00 app[web.1]\cf4 \strokec4 :     (db) lib/db_web/schema.ex:748: anonymous fn(%Db.Messages.Message\{__meta__: #Ecto.Schema.Metadata<:loaded, "messages">, content: "I am a message", created_at: #DateTime<2018-11-30 21:44:40Z>, from_person: #Ecto.Association.NotLoaded<association :from_person is not loaded>, from_person_id: nil, id: 11, read_at: #DateTime<2016-05-24 13:26:08Z>, sent_at: #DateTime<2016-05-24 13:26:08Z>, to_person: #Ecto.Association.NotLoaded<association :to_person is not loaded>, to_person_id: 10, updated_at: #DateTime<2018-11-30 21:44:40Z>\}, %\{to_person_id: "10"\}, #Absinthe.Resolution<[acc: %\{Absinthe.Middleware.Async => false, Absinthe.Middleware.Batch => %\{input: [], output: %\{\}\}\}, adapter: Absinthe.Adapter.LanguageConventions, arguments: %\{to_person_id: "10"\}, context: %\{loader: %Dataloader\{options: [get_policy: :raise_on_error], sources: %\{db: %Dataloader.Ecto\{batches: %\{\}, default_params: %\{\}, options: [], query: #Function<0.58846437/2 in Db.data/0>, repo: Db.Repo, repo_opts: [], results: %\{\}, run_batch: #Function<3.13468455/5 in Dataloader.Ecto.new/2>\}\}\}, pubsub: DbWeb.Endpoint\}, definition: %Absinthe.Blueprint.Document.Field\{alias: nil, argument_data: %\{to_person_id: "10"\}, arguments: [%Absinthe.Blueprint.Input.Argument\{errors: [], flags: %\{\}, input_value: %Absinthe.Blueprint.Input.Value\{data: "10", normalized: %Absinthe.Blueprint.Input.String\{errors: [], flags: %\{\}, schema_node: %Absinthe.Type.NonNull\{of_type: %Absinthe.Type.Scalar\{__private__: [], __reference__: %\{identifier: :id, location: %\{file: "/tmp/build_6c75a9b77499a452e1fb56627b77ea34/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 44\}, module: Absinthe.Type.BuiltIns.Scalars\}, description: "The `ID` scalar type represents a unique identifier, often used to\\nrefetch an object or as key for a cache. The ID type appears in a JSON\\nresponse as a String; however, it is not intended to be human-readable.\\nWhen expected as an input type, any string (such as `\\"4\\"`) or integer\\n(such as `4`) input value will be accepted as an ID.", identifier: :id, name: "ID", parse: #Function<10.34259324/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<7.34259324/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>\}\}, source_location: %Absinthe.Blueprint.Document.SourceLocation\{column: nil, line: 2\}, value: "10"\}, raw: %Absinthe.Blueprint.Input.RawValue\{content: %Absinthe.Blueprint.Input.String\{errors: [], flags: %\{\}, schema_node: nil, source_location: %Absinthe.Blueprint.Document.SourceLocation\{column: nil, line: 2\}, value: "10"\}\}, schema_node: %Absinthe.Type.NonNull\{of_type: %Absinthe.Type.Scalar\{__private__: [], __reference__: %\{identifier: :id, location: %\{file: "/tmp/build_6c75a9b77499a452e1fb56627b77ea34/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 44\}, module: Absinthe.Type.BuiltIns.Scalars\}, description: "The `ID` scalar type represents a unique identifier, often used to\\nrefetch an object or as key for a cache. The ID type appears in a JSON\\nresponse as a String; however, it is not intended to be human-readable.\\nWhen expected as an input type, any string (such as `\\"4\\"`) or integer\\n(such as `4`) input value will be accepted as an ID.", identifier: :id, name: "ID", parse: #Function<10.34259324/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<7.34259324/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>\}\}\}, name: "toPersonId", schema_node: %Absinthe.Type.Argument\{__reference__: %\{identifier: :to_person_id, location: %\{file: "/tmp/build_21ffe225c97f2a643ec8f021132e4e25/lib/db_web/schema.ex", line: 738\}, module: DbWeb.Schema\}, default_value: nil, deprecation: nil, description: nil, name: "to_person_id", type: %Absinthe.Type.NonNull\{of_type: :id\}\}, source_location: %Absinthe.Blueprint.Document.SourceLocation\{column: nil, line: 2\}, value: "10"\}], complexity: nil, directives: [], errors: [], flags: %\{\}, name: "messageSent", schema_node: %Absinthe.Type.Field\{__private__: [], __reference__: %\{identifier: :message_sent, location: %\{file: "/tmp/build_21ffe225c97f2a643ec8f021132e4e25/lib/db_web/schema.ex", line: 737\}, module: DbWeb.Schema\}, args: %\{to_person_id: %Absinthe.Type.Argument\{__reference__: %\{identifier: :to_person_id, location: %\{file: "/tmp/build_21ffe225c97f2a643ec8f021132e4e25/lib/db_web/schema.ex", line: 738\}, module: DbWeb.Schema\}, default_value: nil, deprecation: nil, description: nil, name: "to_person_id", type: %Absinthe.Type.NonNull\{of_type: :id\}\}\}, complexity: nil, config: #Function<3.25615265/2 in DbWeb.Schema.__absinthe_type__/1>, default_value: nil, deprecation: nil, description: nil, identifier: :message_sent, middleware: [\{\{Absinthe.Resolution, :call\}, #Function<1.25615265/3 in DbWeb.Schema.__absinthe_type__/1>\}], name: "message_sent", triggers: [\{[:create_message], [topic: #Function<2.25615265/1 in DbWeb.Schema.__absinthe_type__/1>]\}], type: :message\}, selections: [%Absinthe.Blueprint.Document.Field\{alias: nil, argument_data: %\{\}, arguments: [], complexity: nil, directives: [], errors: [], flags: %\{\}, name: "content", schema_node: %Absinthe.Type.Field\{__private__: [], __reference__: %\{identifier: :content, location: %\{file: "/tmp/build_21ffe225c97f2a643ec8f021132e4e25/lib/db_web/schema/types.ex", line: 97\}, module: DbWeb.Schema.Types\}, args: %\{\}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :content, middleware: [\{Absinthe.Middleware.MapGet, :content\}], name: "content", triggers: [], type: %Absinthe.Type.NonNull\{of_type: :string\}\}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation\{column: nil, line: 3\}, type_conditions: []\}], source_location: %Absinthe.Blueprint.Document.SourceLocation\{column: nil, line: 2\}, type_conditions: []\}, errors: [], extensions: %\{\}, fields_cache: "#fieldscache<...>", fragments: %\{\}, middleware: [], parent_type: %Absinthe.Type.Object\{__private__: [], __reference__: %\{identifier: :subscription, location: %\{file: "/tmp/build_21ffe225c97f2a643ec8f021132e4e25/lib/db_web/schema.ex", line: 735\}, module: DbWeb.Schema\}, description: nil, field_imports: [], fields: %\{message_sent: %Absinthe.Type.Field\{__private__: [], __reference__: %\{identifier: :message_sent, location: %\{file: "/tmp/build_21ffe225c97f2a643ec8f021132e4e25/lib/db_web/schema.ex", line: 737\}, module: DbWeb.Schema\}, args: %\{to_person_id: %Absinthe.Type.Argument\{__reference__: %\{identifier: :to_person_id, location: %\{file: "/tmp/build_21ffe225c97f2a643ec8f021132e4e25/lib/db_web/schema.ex", line: 738\}, module: DbWeb.Schema\}, default_value: nil, deprecation: nil, description: nil, name: "to_person_id", type: %Absinthe.Type.NonNull\{of_type: :id\}\}\}, complexity: nil, config: #Function<3.25615265/2 in DbWeb.Schema.__absinthe_type__/1>, default_value: nil, deprecation: nil, description: nil, identifier: :message_sent, middleware: [\{\{Absinthe.Resolution, :call\}, #Function<1.25615265/3 in DbWeb.Schema.__absinthe_type__/1>\}], name: "message_sent", triggers: [\{[:create_message], [topic: #Function<2.25615265/1 in DbWeb.Schema.__absinthe_type__/1>]\}], type: :message\}\}, identifier: :subscription, interfaces: [], is_type_of: nil, name: "RootSubscriptionType"\}, path: [%Absinthe.Blueprint.Document.Field\{alias: nil, argument_data: %\{to_person_id: "10"\}, arguments: [%Absinthe.Blueprint.Input.Argument\{errors: [], flags: %\{\}, input_value: %Absinthe.Blueprint.Input.Value\{data: "10", normalized: %Absinthe.Blueprint.Input.String\{errors: [], flags: %\{\}, schema_node: %Absinthe.Type.NonNull\{of_type: %Absinthe.Type.Scalar\{__private__: [], __reference__: %\{identifier: :id, location: %\{file: "/tmp/build_6c75a9b77499a452e1fb56627b77ea34/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 44\}, module: Absinthe.Type.BuiltIns.Scalars\}, description: "The `ID` scalar type represents a unique identifier, often used to\\nrefetch an object or as key for a cache. The ID type appears in a JSON\\nresponse as a String; however, it is not intended to be human-readable.\\nWhen expected as an input type,  (truncated)\
\cf2 \strokec2 2018-11-30T21:44:40.109668+00:00 app[web.1]\cf4 \strokec4 : 21:44:40.109 [info] Sent 200 in 25ms\
}